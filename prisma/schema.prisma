generator client {
  provider = "prisma-client-js"
}

datasource neondb {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model vas_postpaid {
  id                                                   Int     @id @default(autoincrement())
  Proizvod                                             String  @neondb.VarChar(255)
  Mesec_pruzanja_usluge                                String  @neondb.VarChar(10)
  Jedinicna_cena                                       Decimal @neondb.Decimal(15, 2)
  Broj_transakcija                                     Int
  Fakturisan_iznos                                     Decimal @neondb.Decimal(15, 2)
  Fakturisan_korigovan_iznos                           Decimal @neondb.Decimal(15, 2)
  Naplacen_iznos                                       Decimal @neondb.Decimal(15, 2)
  Kumulativ_naplacenih_iznosa                          Decimal @neondb.Decimal(15, 2)
  Nenaplacen_iznos                                     Decimal @neondb.Decimal(15, 2)
  Nenaplacen_korigovan_iznos                           Decimal @neondb.Decimal(15, 2)
  Storniran_iznos_u_tekucem_mesecu_iz_perioda_pracenja Decimal @map("Storniran_iznos_u_tekucem_mesecu_iz_perioda_pracenja") @neondb.Decimal(15, 2)
  Otkazan_iznos                                        Decimal @neondb.Decimal(15, 2)
  Kumulativ_otkazanih_iznosa                           Decimal @neondb.Decimal(15, 2)
  Provajder                                            String?
  userId                                               Int?
  Iznos_za_prenos_sredstava_                           Decimal @map("Iznos_za_prenos_sredstava_") @neondb.Decimal(15, 2)
  user                                                 users?  @relation(fields: [userId], references: [id])

  @@unique([Proizvod, Mesec_pruzanja_usluge, Provajder], map: "unique_product_date")
}

model HumanitarniUgovori {
  id                      Int      @id @default(autoincrement())
  kratkiBroj              String   @unique @neondb.VarChar(20)
  humanitarnaOrganizacija String   @neondb.VarChar(255)
  ugovor                  String   @neondb.VarChar(255)
  datumPocetka            DateTime
  datumIstekka            DateTime
  telefon                 String?  @neondb.VarChar(20)
  email                   String?  @neondb.VarChar(255)
  pib                     String?  @neondb.VarChar(20)
  racun                   String?  @neondb.VarChar(50)
  banka                   String?  @neondb.VarChar(100)
  mb                      String?  @neondb.VarChar(20)
  userId                  Int?
  updatedUserId           Int?
  aneks_1                 String?
  aneks_2                 String?
  aneks_3                 String?
  aneks_4                 String?
  aneks_5                 String?
  aneks_6                 String?
  namena                  String?
  user                    users?   @relation(fields: [userId], references: [id])
}

model HumanitarniUgovoriHistory {
  id                          Int       @id @default(autoincrement())
  originalId                  Int
  operationType               String
  datumPromene                DateTime  @default(now())
  humanitarnaOrganizacija_old String?   @neondb.VarChar(255)
  humanitarnaOrganizacija_new String?   @neondb.VarChar(255)
  ugovor_old                  String?   @map("ugovor_old") @neondb.VarChar(255)
  ugovor_new                  String?   @map("ugovor_new") @neondb.VarChar(255)
  datumPocetka_old            DateTime? @neondb.Date
  datumPocetka_new            DateTime? @neondb.Date
  datumIstekka_old            DateTime? @neondb.Date
  datumIstekka_new            DateTime? @neondb.Date
  kratkiBroj_old              String?   @map("kratkiBroj_old") @neondb.VarChar(50)
  kratkiBroj_new              String?   @map("kratkiBroj_new") @neondb.VarChar(50)
  telefon_old                 String?   @map("telefon_old") @neondb.VarChar(50)
  telefon_new                 String?   @map("telefon_new") @neondb.VarChar(50)
  email_old                   String?   @map("email_old") @neondb.VarChar(255)
  email_new                   String?   @map("email_new") @neondb.VarChar(255)
  pib_old                     String?   @map("pib_old") @neondb.VarChar(20)
  pib_new                     String?   @map("pib_new") @neondb.VarChar(20)
  racun_old                   String?   @map("racun_old") @neondb.VarChar(50)
  racun_new                   String?   @map("racun_new") @neondb.VarChar(50)
  banka_old                   String?   @map("banka_old") @neondb.VarChar(255)
  banka_new                   String?   @map("banka_new") @neondb.VarChar(255)
  mb_old                      String?   @map("mb_old") @neondb.VarChar(20)
  mb_new                      String?   @map("mb_new") @neondb.VarChar(20)
  aneks_1_new                 String?   @map("aneks_1_new") @neondb.VarChar(255)
  aneks_1_old                 String?   @map("aneks_1_old") @neondb.VarChar(255)
  aneks_2_new                 String?   @map("aneks_2_new") @neondb.VarChar(255)
  aneks_2_old                 String?   @map("aneks_2_old") @neondb.VarChar(255)
  aneks_3_new                 String?   @map("aneks_3_new") @neondb.VarChar(255)
  aneks_3_old                 String?   @map("aneks_3_old") @neondb.VarChar(255)
  aneks_4_new                 String?   @map("aneks_4_new") @neondb.VarChar(255)
  aneks_4_old                 String?   @map("aneks_4_old") @neondb.VarChar(255)
  aneks_5_new                 String?   @map("aneks_5_new") @neondb.VarChar(255)
  aneks_5_old                 String?   @map("aneks_5_old") @neondb.VarChar(255)
  aneks_6_new                 String?   @map("aneks_6_new") @neondb.VarChar(255)
  aneks_6_old                 String?   @map("aneks_6_old") @neondb.VarChar(255)
  userId                      Int?
  authorId                    Int?
  updatedById                 Int?
  author                      users?    @relation("HistoryAuthor", fields: [authorId], references: [id])
  updatedBy                   users?    @relation("HistoryUpdater", fields: [updatedById], references: [id])

  @@index([originalId], map: "idx_history_original_id")
}

model users {
  id                 Int                         @id @default(autoincrement())
  name               String?
  email              String                      @unique @neondb.VarChar(255)
  emailVerified      DateTime?                   @default(now()) @map("email_verified")
  password           String                      @neondb.VarChar(255)
  role               String?                     @default("user") @neondb.VarChar(50)
  created_by         Int?
  created_at         DateTime?                   @default(now()) @neondb.Timestamptz(6)
  updated_at         DateTime?                   @default(now()) @neondb.Timestamptz(6)
  image              String?                     @default("") @neondb.VarChar(255)
  active             Boolean                     @default(true)
  lastLogin          DateTime?                   @default(now()) @neondb.Timestamp(6)
  lockedUntil        DateTime?
  loginAttempts      Int?                        @default(0)
  accounts           Account[]
  HumanitarniUgovori HumanitarniUgovori[]
  authoredHistories  HumanitarniUgovoriHistory[] @relation("HistoryAuthor")
  updatedHistories   HumanitarniUgovoriHistory[] @relation("HistoryUpdater")
  sessions           Session[]
  vas_postpaid       vas_postpaid[]
  vas_servisi        vas_servisi[]
}

model vas_servisi {
  id               Int       @id @default(autoincrement())
  grupa            String    @neondb.VarChar(50)
  naziv_servisa    String    @neondb.VarChar(100)
  cena             Decimal?  @neondb.Decimal(10, 2)
  date             DateTime? @neondb.Date
  broj_transakcija Decimal?  @neondb.Decimal(15, 0)
  ukupno           Decimal?  @neondb.Decimal(15, 2)
  Provajder        String?   @neondb.VarChar(100)
  userId           Int?
  user             users?    @relation(fields: [userId], references: [id])

  @@unique([grupa, naziv_servisa, Provajder, date, cena], map: "unique_vas_pos")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            Int
  user              users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       Int
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailProcessingLog {
  id          Int      @id @default(autoincrement())
  messageId   String   @unique
  processedAt DateTime @default(now())
  status      String
  action      String?
  contractId  Int?
}

model Contract {
  id             Int           @id @default(autoincrement())
  providerId     Int
  agreement_name String        @neondb.VarChar(255)
  service_name   String        @neondb.VarChar(255)
  step_name      String?       @neondb.VarChar(255)
  sender_name    String        @neondb.VarChar(255)
  requests       Int?
  message_parts  Int?
  details        String?
  Provider       Provider      @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_provider")
  bulkServisi    bulkServisi[]

  @@unique([providerId, agreement_name, service_name, step_name, requests, message_parts], map: "contract_unique")
}

model Provider {
  id              Int           @id @default(autoincrement())
  name            String        @unique @neondb.VarChar(255)  // Glavno ime provajdera
  name_bulk       String?       @neondb.VarChar(255)          // Ime za bulk usluge
  name_vas        String?       @neondb.VarChar(255)          // Ime za VAS usluge
  name_vas_servisi String?      @neondb.VarChar(255)          // Ime za VAS servise
  name_vas_postpaid String?     @neondb.VarChar(255)          // Ime za VAS postpaid usluge
  name_vas_prepaid  String?     @neondb.VarChar(255)          // Ime za VAS prepaid usluge
  Contract        Contract[]    // Veza sa Contract modelom
  bulkServisi     bulkServisi[] // Veza sa bulkServisi modelom
  vas_postpaid    vas_postpaid[] // Veza sa vas_postpaid modelom
  vas_servisi     vas_servisi[]  // Veza sa vas_servisi modelom
}

model bulkServisi {
  id             Int       @id @default(autoincrement())
  providerId     Int
  contractId     Int
  provider_name  String    @neondb.VarChar(255)
  agreement_name String    @neondb.VarChar(255)
  service_name   String    @neondb.VarChar(255)
  step_name      String?   @neondb.VarChar(255)
  sender_name    String    @neondb.VarChar(255)
  requests       Int?
  message_parts  Int?
  created_at     DateTime? @default(now()) @neondb.Timestamp(6)
  Contract       Contract  @relation(fields: [contractId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contract_bulk")
  Provider       Provider  @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_provider_bulk")

  @@unique([provider_name, agreement_name, service_name, sender_name, requests, message_parts], map: "bs_prov_agr_svc_snd_req_msg_uniq")
}
